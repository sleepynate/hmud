Haskell style guide

This guide contains general rules regarding purely stylistic issues (such as indentation), along
with "newbie" hints to remind me of attractive solutions to problems (use monoid to sort by
multiple criteria) and attractive ways to refactor my code (use "(=<<)" instead of "(>>=)" alongside
a "pipe" of composed functions).

--------------------------------------------------

Indent 4 spaces following "do":
f = do
    a <- g

Indent 2 spaces following "if":
if x
  then y
  else z
(If it isn't unreasonably long, write your entire "if" statement on a single line.)

Indent 2 spaces following "case ... of" (if you want to break the line to save horizontal space).

Indent "where" 2 spaces, and indent 2 spaces following "where":
f = x
  where
    x = y

Indent 4 spaces following a hanging lambda:
m >>= \x ->
    return (x + 1)

Prefer function composition over parens:
lift . f $ x
...instead of...
lift (f x)

Use parens with return:
return (f x)
...instead of...
return $ f x
...but prefer...
return x
...over...
return (x)

Prefer explicit import lists over importing everything, unless your import list becomes unreasonably
long (or you are importing a module whose functions are familiar to all Haskell programmers).

Your main module should be named "Main" as opposed to "Foo.Main"; you may, however, put the main
".hs" file in the "Foo" directory.

Your modules should only export the functions that other modules use. Don't export everything.

The "Main" module need only export "main".

Import "Control.Functor" if you only need to use "(<$>)"; import "Control.Applicative" if you also
need to use "(<*>)".

By default, use strict data types and lazy functions.
https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md#dealing-with-laziness

Consider using a list comprehension instead of "map".

Prefer the composition of library functions over rolling your own fold.

Avoid explicit recursion when it is possible (and more readable) to use a fold.

To avoid space leaks, prefer "foldr" and "foldl'" over "foldl". RWH p.113

Consider using a guard to handle an edge case when pattern matching on function parameters:
x `f` _ | x < 0 = z
x `f` y         = a

Prefer using guards with "case" over using "if" with "case":
case x of
  y | y == 1 -> z
    | otherwise -> y

Use applicative style instead of monadic code when possible.

When writing monadic code, consider what can be written outside the monad and lifted in.

Use "(>>)" and "(>>=)"" instead of "do" when your functions can be neatly chained.

Use "(=<<)" instead of "(>>=)" alongside a "pipe" of composed functions. RWH p.357
output . parse =<< (lift . readProcess "/usr/bin/uptime" [] $ "")

Don't forget that you have a choice between "mapM" and "forM". RWH p.221

Use "fmap" or "(<$>)" instead of "liftM".

Use "(<$>)" to lift your lenses:
(^.myLens) <$> myMonadicFun

Don't forget that you can compose "fmap"s to lift a function inside multiple "layers":
Î»> (fmap . fmap . fmap) (+1) $ Just (Just (Just 5))
Just (Just (Just 6))

If appropriate, use "\" to split text across multiple lines. RWH p.315

Consider using a hanging lambda to split a line of code that is particularly long.

Bind to a hanging lambda instead of writing a "do" block when in doing so you are able to write just
two lines of code:
m >>= \x ->
    return (x + 1)

Prefer "maybe" over unwrapping a "Maybe" via pattern matching.

Prefer top level definitions of type "Char" over single-character strings or "Text":
a = 'a'
...instead of...
a = "a"
(When using "Text", just pack your "Char" as necessary.)

Do not surround lens operators with spaces. Similarly, do not surround "(.)" with spaces when using
it to compose lenses:
obj^.name.to T.toUpper
...instead of...
obj ^. name . to T.toUpper

Prefer the "packed" and "unpacked" lenses over the corresponding "pack" and "unpack" functions, but
prefer...
dumpFile . (helpDir ++) . T.unpack
...over...
dumpFile . (helpDir ++) . (^.unpacked)

Prefer "_1" and "_2" over "fst" and "snd".

Use "to" with "(^.)" when you can:
obj^.name.to T.toUpper
maybeString^.to fromJust.packed

Prefer "folded" over using "map" with a lens:
myStrings^..folded.packed
[a, b]^..folded.to T.length

Construct tuples using "(,)" and "(,,)" when appropriate:
(,) <$> [1, 2] <*> [3, 4]

If your data type has a single constructor with a single field, use a "newtype" declaration instead
of a "data" declaration.

When defining an infix operator, consider including a fixity definition. RWH p.244, 328

If appropriate, use infix style in your "data" type and value constructors. RWH p.80

Don't shy away from composing a function with an infix operator:
(++) "You entered:\n\n" . map toUpper
head . (\\) [0..]

Consider manually instantiating "Show" rather than rolling your own function to pretty-print your
type.

Always prefer "Double" over "Float".

Take advantage of record update syntax when you can.

Avoid constraints in "data" type declarations. Apply constraints to the functions that use your
type, where necessary.

Prefer "Data.Map" over association lists.

Use "Data.IntMap" instead of "Data.Map" when your keys are of type "Int".

Use "M.empty" instead of "M.fromList []" (where "M" is "Data.Map")

Instead of using "M.fromList" with a list containing a single pair, use "M.singleton".

Use "when", "unless", and "void" when appropriate.

Use "null" instead of "(== [])".

Use infinite lists when sensible:
head . (\\) [0..]

Derive "Enum" to use ".." in lists of your type.
neckSlots = [Neck1S .. Neck3S]

Use monoid to sort by multiple criteria:
sortBy mySort
  where
    mySort (x, y) (x', y') = (x `compare` x') `mappend` (y `compare` y')

Apply "-funbox-strict-fields" when using strictness annotations ("!") on constructor fields.
When using "-funbox-strict-fields", use the "-O" option for optimization.
