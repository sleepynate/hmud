Running "time cat sampleinput | Mud/mud"...

Strict Maps:

without "-O2"

real	2m48.578s
user	2m45.910s
sys	0m2.506s

with "-O2"

real	2m2.974s
user	2m0.584s
sys	0m2.273s

-----

Lazy Maps:

without "-O2"

real	2m32.929s
user	2m30.231s
sys	0m2.537s

with "-O2"

real	2m2.702s
user	2m0.325s
sys	0m2.230s

-----

CONCLUSION:

Use "-O2"!

Lazy maps are marginally faster than strict maps.

=====

Lazy Text (with "-O2"):

real	2m2.976s
user	2m0.579s
sys	0m2.250s

-----

CONCLUSION:

Strict text is marginally faster than lazy text.

OK, using "-O2", lazy maps, and strict text.

=====

Compiling with RTS options on:
ghc -O2 -rtsopts -fforce-recomp Mud/mud.hs
"Mud/mud +RTS -?" for a list of options.

Running "cat sampleinput | Mud/mud +RTS -sstderr"...

 163,153,102,792 bytes allocated in the heap
   3,677,634,104 bytes copied during GC
       1,037,096 bytes maximum residency (1293 sample(s))
         115,320 bytes maximum slop
               4 MB total memory in use (0 MB lost due to fragmentation)

                                    Tot time (elapsed)  Avg pause  Max pause
  Gen  0     302867 colls,     0 par    4.74s    5.03s     0.0000s    0.0006s
  Gen  1      1293 colls,     0 par    0.77s    0.78s     0.0006s    0.0050s

  INIT    time    0.00s  (  0.00s elapsed)
  MUT     time  117.48s  (120.62s elapsed)
  GC      time    5.50s  (  5.81s elapsed)
  EXIT    time    0.00s  (  0.00s elapsed)
  Total   time  122.98s  (126.42s elapsed)

  %GC     time       4.5%  (4.6% elapsed)

  Alloc rate    1,388,805,113 bytes per MUT second

  Productivity  95.5% of total user, 92.9% of total elapsed

-----

Compiling with options for multicore:
ghc -O2 -threaded -rtsopts -with-rtsopts=-N4 -fforce-recomp Mud/mud.hs

Running "cat sampleinput | Mud/mud +RTS -sstderr"...

 163,185,592,176 bytes allocated in the heap
   3,660,064,560 bytes copied during GC
         918,032 bytes maximum residency (1250 sample(s))
         184,984 bytes maximum slop
               6 MB total memory in use (0 MB lost due to fragmentation)

                                    Tot time (elapsed)  Avg pause  Max pause
  Gen  0     302913 colls, 302913 par   24.00s    8.47s     0.0000s    0.0015s
  Gen  1      1250 colls,  1249 par    1.57s    0.45s     0.0004s    0.0040s

  Parallel GC work balance: 4.44% (serial 0%, perfect 100%)

  TASKS: 6 (1 bound, 5 peak workers (5 total), using -N4)

  SPARKS: 0 (0 converted, 0 overflowed, 0 dud, 0 GC'd, 0 fizzled)

  INIT    time    0.00s  (  0.01s elapsed)
  MUT     time  122.31s  (119.66s elapsed)
  GC      time   25.57s  (  8.92s elapsed)
  EXIT    time    0.00s  (  0.00s elapsed)
  Total   time  147.88s  (128.59s elapsed)

  Alloc rate    1,334,228,218 bytes per MUT second

  Productivity  82.7% of total user, 95.1% of total elapsed

gc_alloc_block_sync: 553568
whitehole_spin: 0
gen[0].sync: 2
gen[1].sync: 3390

-----

CONCLUSION:

Well, it's faster without the multicore options...

=====

Compiling with profiling:

Template Haskell requires that you compile twice, like so:
ghc -O2 -rtsopts -fforce-recomp Mud/mud.hs
ghc -O2 -rtsopts -prof -osuf p_o -auto-all -caf-all -fforce-recomp Mud/mud.hs

Running "cat sampleinput | Mud/mud +RTS -p"...
